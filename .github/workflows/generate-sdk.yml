# .github/workflows/generate-sdk.yml
name: Generate Micro SDK

on:
  pull_request:
    types: [opened, edited, synchronize]
    # Only trigger if PR contains SDK generation request
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  generate-sdk:
    runs-on: ubuntu-latest
    
    # Only run if PR body contains app specification
    if: contains(github.event.pull_request.body, 'APP:') || contains(github.event.pull_request.body, 'app:')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm init -y 2>/dev/null || true
          npm install axios dotenv
      
      - name: Create directories
        run: |
          mkdir -p sdks
          mkdir -p scripts
      
      - name: Generate SDK
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: node scripts/generate-sdk.js
      
      - name: Commit generated SDK
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes to commit
          if [[ -n $(git status --porcelain) ]]; then
            git add sdks/
            git commit -m "ü§ñ Auto-generate SDK for PR #${{ github.event.pull_request.number }}"
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
          else
            echo "No SDK files to commit"
          fi
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Check if SDK was generated
              const sdkFiles = fs.readdirSync('sdks').filter(f => f.endsWith('.js') || f.endsWith('.ts'));
              
              if (sdkFiles.length > 0) {
                const comment = `üéâ **SDK Generated Successfully!**
                
                Generated SDK files:
                ${sdkFiles.map(file => `- \`sdks/${file}\``).join('\n')}
                
                The SDK has been automatically committed to this branch.
                
                **Usage Example:**
                \`\`\`javascript
                const sdk = require('./sdks/${sdkFiles[0]}');
                // Use the generated SDK methods
                \`\`\`
                `;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '‚ùå **SDK Generation Failed**\n\nNo SDK files were generated. Please check the workflow logs for details.'
                });
              }
            } catch (error) {
              console.error('Error in PR comment step:', error);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå **SDK Generation Failed**\n\nPlease check the workflow logs for details. Make sure your PR body contains the required app specification format.'
              });
            }
